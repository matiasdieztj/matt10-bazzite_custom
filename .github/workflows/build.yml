---
name: build-ublue-custom
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  MY_IMAGE_NAME: "${{ github.event.repository.name }}"  # the name of the image produced by this build, matches repo names
  MY_IMAGE_DESC: "My Customized Universal Blue Image"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.MY_IMAGE_NAME }}

          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ env.MY_IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.MY_IMAGE_NAME }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          # Postfix image name with -custom to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ env.MY_IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image to GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --compression-format=zstd

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.

      # Sign container
      - uses: sigstore/cosign-installer@v3.7.0
        if: github.event_name != 'pull_request'
      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

        # Generate ISO file
        - name: Build Container Installer
  # You may pin to the exact commit or the version.
  # uses: JasonN3/build-container-installer@a1ce6da2d6c1af0561bec053366d0f3aa7e38743
  uses: JasonN3/build-container-installer@v1.2.3
  with:
    # Version of the action container to run
    action_version: # optional
    # Space delimited list of additional Lorax templates to include
    additional_templates: # optional
    # Architecture for image to build
    arch: # default is x86_64
    # Overrides the dnf cache key
    dnf_cache_key: # optional
    # Whether to enable caching for dnf
    enable_cache_dnf: # optional, default is true
    # Whether to enable caching for skopeo
    enable_cache_skopeo: # optional, default is false
    # Whether to enable automatically determining Flatpak dependencies
    enable_flatpak_dependencies: # optional, default is true
    # Used for supporting secure boot (requires SECURE_BOOT_KEY_URL to be defined)
    enrollment_password: # optional, default is container-installer
    # Extra params used by grub to boot the anaconda installer
    extra_boot_params: # optional
    # Name of the Flatpak repo on the destination OS
    flatpak_remote_name: # optional, default is flathub
    # Space separated list of flatpak refs to install
    flatpak_remote_refs: # optional, default is 
    # Directory that contains files that list the flatpak refs to install
    flatpak_remote_refs_dir: # optional, default is 
    # URL of the flatpakrepo file
    flatpak_remote_url: # optional, default is https://flathub.org/repo/flathub.flatpakrepo
    # Name of the source container image
    image_name: # default is base
    # Repository containing the source container image
    image_repo: ghcr.io/matiasdieztj/matt10-bazzite_custom # default is quay.io/fedora-ostree-desktops
    # Whether the container image is signed. The policy to test the signing must be configured inside the container image
    image_signed: # optional, default is true
    # Overrides the source of the container image. Must be formatted for the skopeo copy command
    image_src: # optional
    # Tag of the source container image
    image_tag: # optional
    # Name of the ISO you wish to output when completed
    iso_name: # optional, default is build/deploy.iso
    # Overrides the default make target
    make_target: # optional
    # List of repo files for Lorax to use
    repos: # optional
    # The size (in GiB) for the squashfs runtime volume
    rootfs_size: # optional, default is 2
    # Secure boot key that is installed from URL location
    secure_boot_key_url: # optional
    # Overrides the skopeo cache key
    skopeo_cache_key: # optional
    # Source container variant. Available options can be found by running `dnf provides system-release`. Variant will be the third item in the package name. Example: `fedora-release-kinoite-39-34.noarch` will be kinonite
    variant: kinoite # default is Server
    # Fedora version of installer to build
    version: 41 # default is 39
    # Enable Anaconda WebUI
    web_ui: # optional, default is false
          
